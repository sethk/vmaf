name: libvmaf
on:
  push:
  pull_request:

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  libvmaf-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            sudo: sudo
            ccache: ccache
          - os: ubuntu-latest
            cc: ccache gcc-9
            cxx: ccache g++-9
            sudo: sudo
            ccache: ccache
          - os: ubuntu-latest
            cc: ccache clang
            cxx: ccache clang++
            sudo: sudo
            ccache: ccache
          - os: macos-latest
            cc: clang
            cxx: clang++
            sudo: sudo
            ccache: ccache
            experimental: true
          - os: windows-latest
            cc: cl
            cxx: cl
            sudo:
            ccache:

    env:
      CC: ${{ matrix.ccache }} ${{ matrix.cc }}
      CXX: ${{ matrix.ccache }} ${{ matrix.cxx }}
      CPP: ${{ matrix.ccache }} ${{ matrix.cxx }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install meson (non-windows)
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install meson
          meson --version

      - name: Install dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo -E apt-get -yq install ccache ninja-build libomp-dev

      - name: Install gcc (ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.cc == 'gcc'
        run: |
          sudo -E apt-get -yq install gcc g++ nasm

      - name: Install gcc-9 (ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.cc == 'gcc-9'
        run: |
          sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
          sudo -E apt-get -yq install gcc-9 g++-9 nasm

      - name: Install clang (ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.cc == 'clang'
        run: |
          sudo -E apt-get -yq install clang nasm

      - name: Install dependencies (mac)
        if: matrix.os == 'macos-latest'
        run: |
          brew install -q ninja nasm ccache llvm
          echo "PATH=$(brew --prefix)/opt/llvm/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install build tools
          & choco install meson nasm -y -r
          $Env:PATH = "C:\Program Files\Meson;C:\Program Files\NASM;$Env:PATH"
          #
          # Find MSVC
          $VSWhere = 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe'
          $VSDir = & $VSWhere -latest -products '*' -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          $MSVCVersion = Get-Content "$VSDir\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt"
          Write-Host "Using MSVC $MSVCVersion"
          $MSVCDir = "$VSDir\VC\Tools\MSVC\$MSVCVersion"
          $MSVCBinDir = "$MSVCDir\bin\Hostx64\x64"
          $Env:PATH = "$MSVCBinDir;$Env:PATH"
          $Env:LIB = "$MSVCDir\lib\x64"
          $Env:INCLUDE = "$MSVCDir\include"
          #
          # Find Windows 10 SDK
          $kitsRoot = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots").KitsRoot10
          $latestSdk = Get-ChildItem "$kitsRoot\Include" -Filter '10.*' | Sort-Object Name -Descending | Select-Object -First 1
          $Win10SDKVer = $latestSdk.Name
          Write-Host "Using Windows 10 SDK $Win10SDKVer"
          $Win10SDKDir = "C:\Program Files (x86)\Windows Kits\10"
          $Env:LIB += ";$Win10SDKDir\Lib\$Win10SDKVer\um\x64"
          $Env:INCLUDE+= ";$Win10SDKDir\Include\$Win10SDKVer\um"
          $Env:LIB += ";$Win10SDKDir\Lib\$Win10SDKVer\ucrt\x64"
          $Env:INCLUDE+= ";$Win10SDKDir\Include\$Win10SDKVer\ucrt"
          $Env:INCLUDE+= ";$Win10SDKDir\Include\$Win10SDKVer\shared"
          #
          # Install pthreads-win32
          '{"name": "libvmaf-deps","version": "0.0.1","dependencies": ["pthreads"]}' | Set-Content vcpkg.json
          vcpkg x-update-baseline
          vcpkg install
          $PThreadsDir = Join-Path (Get-Location) "vcpkg_installed\x64-windows"
          $Env:INCLUDE+= ";$PThreadsDir\include"
          $Env:LIB+= ";$PThreadsDir\lib"
          $Env:PATH+= ";$PThreadsDir\bin"
          #
          # Store environment
          "LIB=$Env:LIB" | Out-File -Append $Env:GITHUB_ENV
          "INCLUDE=$Env:INCLUDE" | Out-File -Append $Env:GITHUB_ENV
          "PATH=$Env:PATH" | Out-File -Append $Env:GITHUB_ENV

      - name: Configure
        run: |
          meson setup libvmaf libvmaf/build --buildtype release --prefix $PWD/install -Denable_float=true

      - name: Build
        run: |
          ninja -vC libvmaf/build

      - name: Run tests
        id: run_tests
        run: |
          ldd libvmaf/build/test/test_feature_collector
          ninja -vC libvmaf/build test

      - name: Dump test log if tests failed
        if: failure() && steps.run_tests.outcome == 'failure'
        run: |
          cat libvmaf/build/meson-logs/testlog.txt

      - name: Install (non-windows)
        if: matrix.os != 'windows-latest'
        run: |
          ${{ matrix.sudo }} ninja -vC libvmaf/build install

      - name: Set up tox
        run: |
          pip install tox

      - name: Run tox tests
        run: |
          tox -c python

      - name: Get binary path & Current Release
        id: get_info
        run: |
          ldd "./install/bin/vmaf" || true
          echo "path=./install/bin/vmaf" >> $GITHUB_OUTPUT
          echo "upload_url=$(curl -L https://api.github.com/repos/${{ github.repository }}/releases/tags/$(cut -d/ -f3 <<< ${{ github.ref }}) | jq -r ."upload_url")" >> $GITHUB_OUTPUT

      - name: Upload vmaf (non-windows)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.cc }}-vmaf
          path: ${{ steps.get_info.outputs.path }}

      - name: Upload vmaf (non-windows)
        if: steps.get_info.outputs.upload_url != 'null' && matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_info.outputs.upload_url }}
          asset_path: ${{ steps.get_info.outputs.path }}
          asset_name: vmaf
          asset_content_type: application/octet-stream
