name: libvmaf
on:
  push:
#  pull_request:

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  libvmaf-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            sudo: sudo
            ccache: ccache
          #- os: ubuntu-latest
          #  CC: ccache gcc-9
          #  CXX: ccache g++-9
          #- os: ubuntu-latest
          #  CC: ccache clang
          #  CXX: ccache clang++
          - os: macos-latest
            cc: clang
            cxx: clang++
            sudo: sudo
            ccache: ccache
            experimental: true
          - os: windows-latest
            cc: cl
            cxx: cl
            msvc_version: 14.43.34808
            win_sdk_version: 10.0.22000.0
            sudo:
            ccache:
    env:
      CC: ${{ matrix.ccache }} ${{ matrix.cc }}
      CXX: ${{ matrix.ccache }} ${{ matrix.cxx }}
      CPP: ${{ matrix.ccache }} ${{ matrix.cxx }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install meson (non-windows)
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install meson
          meson --version

      - name: Install dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo -E apt-get -yq install ccache ninja-build libomp-dev

      - name: Install gcc (ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.cc == 'gcc'
        run: |
          sudo -E apt-get -yq install gcc g++ nasm

      - name: Install gcc-9 (ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.cc == 'gcc-9'
        run: |
          sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
          sudo -E apt-get -yq install gcc-9 g++-9 nasm

      - name: Install clang (ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.cc == 'clang'
        run: |
          sudo -E apt-get -yq install clang nasm

      - name: Install dependencies (mac)
        if: matrix.os == 'macos-latest'
        run: |
          brew install -q ninja nasm ccache llvm
          echo "PATH=$(brew --prefix)/opt/llvm/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: |
          & choco install visualstudio2022buildtools visualstudio2022-workload-vctools windows-sdk-10.0 meson nasm -y -r
          $VSWhere = 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe'
          $VSDir = & $VSWhere -latest -products '*' -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          $MSVCDir = "$VSDir\VC\Tools\MSVC\${{ matrix.msvc_version }}"
          $MSVCBinDir = "$MSVCDir\bin\Hostx64\x64"
          $Env:PATH = "C:\Program Files\Meson;C:\Program Files\NASM;$MSVCBinDir;$Env:PATH"
          $Env:LIB = "$MSVCDir\lib\x64"
          $Env:INCLUDE = "$MSVCDir\include"
          $Win10SDKDir = "C:\Program Files (x86)\Windows Kits\10"
          $Env:LIB += ";$Win10SDKDir\Lib\${{ matrix.win_sdk_version }}\um\x64"
          $Env:INCLUDE+= ";$Win10SDKDir\Include\${{ matrix.win_sdk_version }}\um"
          $Env:LIB += ";$Win10SDKDir\Lib\${{ matrix.win_sdk_version }}\ucrt\x64"
          $Env:INCLUDE+= ";$Win10SDKDir\Include\${{ matrix.win_sdk_version }}\ucrt"
          $Env:INCLUDE+= ";$Win10SDKDir\Include\${{ matrix.win_sdk_version }}\shared"
          "LIB=$Env:LIB" | Out-File -Append $Env:GITHUB_ENV
          "INCLUDE=$Env:INCLUDE" | Out-File -Append $Env:GITHUB_ENV
          "PATH=$Env:PATH" | Out-File -Append $Env:GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Configure
        run: |
          meson setup libvmaf libvmaf/build --buildtype release --prefix $PWD/install -Denable_float=true
      - name: Build
        run: |
          ninja -vC libvmaf/build
      - name: Run tests
        run: |
          ninja -vC libvmaf/build test
      - name: Install
        run: |
          ${{ matrix.sudo }} ninja -vC libvmaf/build install
      - name: Set up tox
        run: |
          pip install tox
      - name: Run tox tests
        run: |
          tox -c python

      - name: Get binary path & Current Release
        id: get_info
        run: |
          ldd "./install/bin/vmaf" || true
          echo "path=./install/bin/vmaf" >> $GITHUB_OUTPUT
          echo "upload_url=$(curl -L https://api.github.com/repos/${{ github.repository }}/releases/tags/$(cut -d/ -f3 <<< ${{ github.ref }}) | jq -r ."upload_url")" >> $GITHUB_OUTPUT

      - name: Upload vmaf
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.cc }}-vmaf
          path: ${{ steps.get_info.outputs.path }}
      - name: Upload vmaf
        if: steps.get_info.outputs.upload_url != 'null'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_info.outputs.upload_url }}
          asset_path: ${{ steps.get_info.outputs.path }}
          asset_name: vmaf
          asset_content_type: application/octet-stream
